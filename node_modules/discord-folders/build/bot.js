"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Bot = void 0;
const discord_js_1 = require("discord.js");
const commands_handler_1 = require("./commands_handler");
const listener_1 = require("./listener");
const logger_1 = require("./logger");
const fs = require("fs/promises");
const url_1 = require("url");
const defaultBotOptions = {
    clientOptions: {},
    listenerOptions: {},
    commandsHandlerOptions: {},
    name: "Bot"
};
class Bot {
    constructor(prefix, srcDir, options) {
        this.prefix = prefix;
        this.srcDir = srcDir;
        this.options = { ...defaultBotOptions, ...options };
        this.client = new discord_js_1.Client(this.options.clientOptions);
        this.options.commandsHandlerOptions.name = this.options.commandsHandlerOptions.name ?? this.options.name + "'s Commands Handler";
        this.options.listenerOptions.name = this.options.listenerOptions.name ?? this.options.name + "'s Listener";
        this.logger = new logger_1.Logger(this.options.name);
        this.commandsHandler = new commands_handler_1.CommandsHandler({ name: "root" }, this.options.commandsHandlerOptions);
        this.listeners = [];
        this.load();
        this.client.on("ready", () => this.onReady());
    }
    async load() {
        // We could use promise.all, but that makes logging look bad
        await this.loadCommandsHandler();
        await this.loadListeners();
    }
    async loadCommandsHandler() {
        const root = await commands_handler_1.CommandsHandler.loadRootFromFolder(this.srcDir + "\\commands");
        // Make sure there was no errors loading the root
        if (!root) {
            this.logger.error(`Could not find commands directory, "${this.srcDir}\\commands" was not found`);
            return;
        }
        this.commandsHandler.setRoot(root);
        this.logger.logSuccess("Finish loading commands handler");
    }
    async loadListeners() {
        // The url of the root folder that will be searched
        const url = url_1.pathToFileURL(this.srcDir + "\\listeners");
        // Make sure the directory exists
        try {
            await fs.access(url);
        }
        catch (err) {
            this.logger.error(`Could not find listeners directory ${this.srcDir + "\\listeners"}, make sure it exists and that spelling is correct`);
            return;
        }
        // Get all the children in the listeners directory  
        const children = await fs.readdir(url);
        // Load all the listeners
        for (const child of children) {
            const listener = await listener_1.Listener.loadFormFolder(child, this.srcDir + `\\listeners\\${child}`, this.client, this.options.listenerOptions);
            if (listener) {
                this.listeners.push(listener);
                listener.options.name = this.options.name + "'s Listener";
            }
            else {
                this.logger.error(`Couldn't load the ${child} listener`);
            }
        }
        this.logger.logSuccess("Finished loading all listeners");
    }
    onReady() {
        // Start all the listeners
        this.listeners.forEach(listener => listener.listen());
        this.client.on("message", message => {
            // Make sure message starts with the prefix
            if (!message.content.startsWith(this.prefix))
                return;
            // Remove the prefix from the message (only on our side)
            message.content = message.content.slice(this.prefix.length).trim();
            // Handle the command
            this.commandsHandler.resolveCommandFromMessage(this.client, message);
        });
    }
    login(token) {
        return this.client.login(token);
    }
}
exports.Bot = Bot;
