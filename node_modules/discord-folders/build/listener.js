"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Listener = void 0;
const url_1 = require("url");
const fs = require("fs/promises");
const logger_1 = require("./logger");
//@ts-ignore
const import_js_1 = require("../esm/import.js");
const defaultListenerOptions = {
    verbose: true,
    name: "Listener"
};
class Listener {
    constructor(client, event, options) {
        this.client = client;
        this.event = event;
        this.callbacks = [];
        this.options = { ...defaultListenerOptions, ...options };
        this.logger = new logger_1.Logger(this.options.name);
        // Disable non-important logging if verbose is off
        if (!this.options.verbose)
            this.logger.log = () => { };
    }
    listen() {
        this.client.on(this.event, (...args) => this.onCalled(...args));
        this.logger.logSuccess(`Listening to all "${this.event}" events on "${this.options.name}"`);
    }
    deafen() {
        this.client.off(this.event, this.onCalled);
        this.logger.log(`No longer listening to all "${this.event}" events on "${this.client.user.username}"`);
    }
    add(callback) {
        this.callbacks.push(callback);
        this.logger.log(`Adding new callback to ${this.event} listener`);
    }
    remove(callback) {
        this.callbacks = this.callbacks.filter(val => val !== callback);
    }
    onCalled(...args) {
        this.logger.log(`Calling all callbacks for ${this.event} event`);
        this.callbacks.forEach(callback => callback(...args));
    }
    static async loadFormFolder(event, path, client, options) {
        // This is the listener that we will eventually load everything into
        const listener = new Listener(client, event, options);
        // The url of the root folder that will be searched
        const url = url_1.pathToFileURL(path);
        // Make sure the directory exists
        try {
            await fs.access(url);
        }
        catch (err) {
            this.staticLogger.error(`Could not find listeners directory ${path}, make sure it exists and that spelling is correct`);
            return false;
        }
        // This is the recursive function that will load each folder and it's children
        const walkFolder = async (url) => {
            // Set stuff up
            const path = url_1.fileURLToPath(url);
            const filename = path.split('\\').pop().split('/').pop();
            const data = await fs.lstat(url);
            // If it is a folder, we search for children commands, and dont load any modules
            if (data.isDirectory()) {
                // Get all the children in this directory 
                const children = await fs.readdir(url);
                // Load them all
                for (const child of children)
                    await walkFolder(url_1.pathToFileURL(`${path}\\${child}`));
            }
            else {
                // It must be a file, in which case we can try to import it as a module
                // Ignore files that are not .js files
                if (!path.endsWith(".js")) {
                    this.staticLogger.error(`Found a file that does not end in .js, will be ignoring "${path}"`);
                    return false;
                }
                // Import the file
                const module = await import_js_1.importES6andCJS(path);
                // Make sure we can find the onCalled export
                if (typeof module.onCalled !== "function") {
                    this.staticLogger.error(`Could not find a "onCalled" exported function from module "${path}"`);
                    return false;
                }
                listener.add(module.onCalled);
                this.staticLogger.log(`Loaded ${path} into new listener`);
            }
        };
        await walkFolder(url);
        this.staticLogger.logSuccess(`Loaded everything from ${path}`);
        return listener;
    }
}
exports.Listener = Listener;
Listener.staticLogger = new logger_1.Logger("Listeners");
