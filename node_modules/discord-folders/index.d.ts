import { Client, ClientEvents, ColorResolvable, GuildMember, Message, ClientOptions } from "discord.js";

declare module 'discord-folders' {

    class Logger {
        private readonly tag;
        constructor(tag: string);
        log(data: string): void;
        error(data: string): void;
    }

    // Listeners
    export interface ListenerOptions {
        verbose?: boolean;
        name?: string;
    }

    export class Listener {
        client: Client;
        event: keyof ClientEvents;
        callbacks: Array<Function>;
        logger: Logger;
        options: ListenerOptions;
        constructor(client: Client, event: keyof ClientEvents, options?: ListenerOptions);
        listen(): void;
        deafen(): void;
        add(callback: Function): void;
        remove(callback: Function): void;
        private onCalled;
        static staticLogger: Logger;
        static loadFormFolder(event: keyof ClientEvents, path: string, client: Client): Promise<false | Listener>;
    }

    // Commands Handler
    export interface Command {
        name: string;
        onCalled?: (client: Client, message: Message) => any;
        children?: {
            [index: string]: Command;
        };
        description?: string;
        hasPermissions?: (member: GuildMember) => boolean;
    }

    export interface CommandsHandlerOptions {
        autoCreateHelpCommand?: boolean;
        caseSensitive?: boolean;
        sendInvalidPermissionsMessage?: boolean;
        footer?: string;
        embedColor?: ColorResolvable;
        name?: string;
    }

    export class CommandsHandler {
        private root;
        options: CommandsHandlerOptions;
        private logger;
        constructor(root: Command, options?: CommandsHandlerOptions);
        setRoot(root: Command): void;
        resolveCommandFromStringArray(commands: Array<string>, client: Client, message: Message): any;
        resolveCommandFromMessage(client: Client, message: Message): any;
        private internalResolveCommand;
        private getChildFromCommand;
        private sendUnknownCommandMessage;
        private sendInvalidPermissionsMessage;
        private sendHelpCommandMessage;
        serialize(): string;
        static staticLogger: Logger;
        static loadNewHandlerFromFolder(path: string): Promise<CommandsHandler | false>;
        static loadRootFromFolder(path: string): Promise<Command | false>;
        static deserialize(input: string): CommandsHandler;
    }

    // Bot
    export interface BotOptions {
        clientOptions?: ClientOptions;
        listenerOptions?: ListenerOptions;
        commandsHandlerOptions?: CommandsHandlerOptions;
        name?: string;
    }
    export class Bot {
        readonly commandsHandler: CommandsHandler;
        readonly listeners: Array<Listener>;
        readonly client: Client;
        readonly prefix: string;
        readonly options: BotOptions;
        private readonly logger;
        readonly srcDir: string;
        constructor(prefix: string, srcDir: string, options?: BotOptions);
        private load;
        private loadCommandsHandler;
        private loadListeners;
        private onReady;
        login(token: string): Promise<string>;
    }


}